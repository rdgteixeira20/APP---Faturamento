# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tela.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem

import sys

from os.path import dirname, realpath, join
import pandas as pd
import numpy as np

from statsmodels.tsa.ar_model import AutoReg

from tkinter import Tk
from tkinter.filedialog import askopenfilename


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(640, 487)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.rb_media = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_media.setGeometry(QtCore.QRect(20, 210, 100, 22))
        self.rb_media.setObjectName("rb_media")
        self.rb_desvio_padrao = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_desvio_padrao.setGeometry(QtCore.QRect(20, 250, 131, 22))
        self.rb_desvio_padrao.setObjectName("rb_desvio_padrao")
        self.rb_media_pomderada = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_media_pomderada.setGeometry(QtCore.QRect(20, 290, 131, 22))
        self.rb_media_pomderada.setObjectName("rb_media_pomderada")
        self.rb_segregacao_de_dados = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_segregacao_de_dados.setGeometry(QtCore.QRect(20, 330, 161, 22))
        self.rb_segregacao_de_dados.setObjectName("rb_segregacao_de_dados")
        self.rb_regressao_linear = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_regressao_linear.setGeometry(QtCore.QRect(20, 370, 131, 22))
        self.rb_regressao_linear.setObjectName("rb_regressao_linear")
        self.rb_series_temporais = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_series_temporais.setGeometry(QtCore.QRect(20, 410, 141, 22))
        self.rb_series_temporais.setObjectName("rb_series_temporais")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(460, 450, 171, 21))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(12, 450, 441, 24))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(520, 100, 80, 24))
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(230, 100, 151, 24))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lb_totalfaturado = QtWidgets.QLabel(self.centralwidget)
        self.lb_totalfaturado.setGeometry(QtCore.QRect(260, 80, 91, 16))
        self.lb_totalfaturado.setObjectName("lb_totalfaturado")
        self.lb_tipodepredicao = QtWidgets.QLabel(self.centralwidget)
        self.lb_tipodepredicao.setGeometry(QtCore.QRect(40, 170, 101, 16))
        self.lb_tipodepredicao.setObjectName("lb_tipodepredicao")
        self.sb_colunas = QtWidgets.QSpinBox(self.centralwidget)
        self.sb_colunas.setGeometry(QtCore.QRect(430, 100, 46, 25))
        self.sb_colunas.setObjectName("sb_colunas")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 151, 151))
        self.label_4.setObjectName("label_4")
        self.lb_predicaofaturamento = QtWidgets.QLabel(self.centralwidget)
        self.lb_predicaofaturamento.setGeometry(QtCore.QRect(230, 20, 351, 31))
        self.lb_predicaofaturamento.setObjectName("lb_predicaofaturamento")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(600, 0, 58, 16))
        self.label_5.setObjectName("label_5")
        self.tb_faturamento = QtWidgets.QTableWidget(self.centralwidget)
        self.tb_faturamento.setGeometry(QtCore.QRect(180, 140, 451, 301))
        self.tb_faturamento.setObjectName("tb_faturamento")
        self.tb_faturamento.setColumnCount(3)
        self.tb_faturamento.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tb_faturamento.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_faturamento.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tb_faturamento.setHorizontalHeaderItem(2, item)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.rb_media.setText(_translate("MainWindow", "Média"))
        self.rb_desvio_padrao.setText(_translate("MainWindow", "Desvio Padrão"))
        self.rb_media_pomderada.setText(_translate("MainWindow", "Média ponderada"))
        self.rb_segregacao_de_dados.setText(_translate("MainWindow", "Segragação de dados"))
        self.rb_regressao_linear.setText(_translate("MainWindow", "Regrassão linear"))
        self.rb_series_temporais.setText(_translate("MainWindow", "Séries Temporais"))
        self.pushButton.setText(_translate("MainWindow", "Aplicar"))
        self.pushButton_2.setText(_translate("MainWindow", "Arquivo"))
        self.lb_totalfaturado.setText(_translate("MainWindow", "Total Faturado"))
        self.lb_tipodepredicao.setText(_translate("MainWindow", "Tipo de Predição"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p><img src=\":/faturamento/iconefinanceiro.png.svg\"/></p></body></html>"))
        self.lb_predicaofaturamento.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:22pt; font-weight:600;\">Predição de Faturamento</span></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "V1.0"))
        item = self.tb_faturamento.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Ano"))
        item = self.tb_faturamento.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Mes"))
        item = self.tb_faturamento.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Faturamento"))

        self.pushButton_2.clicked.connect(self.openFile)#Quando o Botão open file é clicado, chama a função openfile ( def openFile)
        self.pushButton.clicked.connect(self.predicao) # Quando o Botão Predição é clicado, chama a função predicao (def predicao)

    import faturamento # Imagem convertida para .py

        


    def openFile(self): #Função abrir arquivo
        #Localiza o caminho do arquivo#
        Tk().withdraw() #Abre uma tela para buscar o arquivo
        path = askopenfilename() # Caminho do arquivo 
        self.all_data = pd.read_csv(path) #lẽ todas as informações da tabela carregada

        #Carrega o arquivo na table tb_faturamento#
        numColumn = self.sb_colunas.value() #variável numColumn recebe o valor da spinbox
        if numColumn == 0: # Se a spinbox for igual a zero
            numRows = len(self.all_data.index) # número de linhas ( numRows), será igual ao tamanho total da tabela do arquivo
        else : #Se não
            numRows = numColumn # Numero de linhas será o mesmo número de colunas
        self.tb_faturamento.setColumnCount(len(self.all_data.columns)) #table na tela receberá o valor de colunas referente ao total de colunas do arquivo
        self.tb_faturamento.setRowCount(numRows) # table na tela receberá o numero de linhas da variável numRow
        self.tb_faturamento.setHorizontalHeaderLabels(self.all_data.columns) #  table da tela receberá o cabeçalho da tabela original do arquivo

        for i in range(numRows): # para cada item no range do numero de linhas ( Para cada linha da table da tela)
            for j in range(len(self.all_data.columns)): # para cada item no range do número de colunas ( para cada coluna da tabela do arquivo)
                self.tb_faturamento.setItem(i, j, QTableWidgetItem(str(self.all_data.iat[i,j]))) # escreva na table da tela as linhas e colunas com referência na tablea do arquivo

        self.tb_faturamento.resizeColumnsToContents() # ajustar automaticamente o tamanho das colunas da tabela para que caibam todos os dados presentes
        self.tb_faturamento.resizeRowsToContents() # ajustar automaticamnete o tamanho das linhas da tabela para que caibam todos os dados presentes

        #Soma do Faturamento#
        
        soma_faturamento = str('R$%0.02f' %sum(self.all_data['Faturamento'])) # Variável soma_faturamento recebe uma string configurada para 2 casas dpois do zero da soma de todos os valores da coluna Faturamento da tabela
        self.lineEdit_2.setText(soma_faturamento) # O campo de texto da tela ( lineEdit_2) , recebe e mostra o valor da variável soma_faturamento

    def predicao(self): # Função Predição
        df = self.all_data # variável df recebe todos os valores da tabela 

        ##### Cáculo de Média #####

        if self.rb_media.isChecked() == True : # se a caixa de seleção media estiver selecionada
            media = df['Faturamento'].mean() # variável media recebe o valor médio da df pela função .mean()
            predicao = 'Nos próximos meses será faturado R$' + str('%0.002f' %media) + '/mês em média.' # variável predicao recebe o valor calculado da media e concatena com as strings, onde o valor media está configurado para 2 casas depois da virgula
            self.lineEdit.setText(predicao) # escreve a variável predicao no campo da tela lineEdit
        
        ##### Cálculo de Desvio padrão #####

        elif self.rb_desvio_padrao.isChecked() == True : # Se caixa de seleção desvio padrão estiver selecionada
            media = df['Faturamento'].mean() # variável média recebe valor médio de todas as informações da coluna Faturamento
            desvpad = df["Faturamento"].std() # variável devpad recebe o valor calculado de desvio padrão de todos os valores da coluna Faturamento através da função std()
            coe_var = (desvpad / media) * 100 # Variável coeficiente de variação ( coe_var), recebe o valor da divisão entre as variáveis desvpad / media e multiplica o resultado por 100, gerando um valor em porcentagem.
            predicao = 'Predição de R$ ' + str('%0.002f' %media) + '/mês , podendo variar  ' + str('%0.02f' %coe_var) + '%' #Variável predição recebe o valor em str de média e coe_var configurados para exibição em 2 casas depois da vírgula
            self.lineEdit.setText(predicao) # campo lineEdit na tela recebe o valor da variável predicao

        ##### Cálculo de Média Ponderada #####

        elif self.rb_media_pomderada.isChecked() == True: # se caixa de seleção media ponderada estiver selecionada
            lista = np.transpose((np.array([df['Faturamento'].tail(), np.arange(1,6)]))) 
            pesos = np.arange(1, 6)
            df_ult =pd.DataFrame(lista, columns = ['ultimos', 'Pesos'])
            df_ult['Ponderado'] = df_ult['ultimos'] * df_ult['Pesos']
            med_pond = df_ult['Ponderado'].sum() / df_ult['Pesos'].sum()
            predicao = 'Predição Ponderada de R$' + str('%0.002f' %med_pond) + 'para os pŕoximos meses.'
            self.lineEdit.setText(predicao)

        ##### Cálculo de De Segregação de Dados #####

        elif self.rb_segregacao_de_dados.isChecked() == True:
            df_janeiro = df.loc[df['Mes'] == 1 ]
            med_seg = df_janeiro['Faturamento'].mean()
            predicao = 'Predição Segregada de R$ ' + str('%0.02f' %med_seg) + ' para Janeiro .'
            self.lineEdit.setText(predicao)

        ##### Cálculo de Regressão Linear #####

        elif self.rb_regressao_linear.isChecked() == True:
            coefficients = np.polyfit(df.index, df['Faturamento'], 1)
            a = coefficients[0]
            b = coefficients[1]
            jan_reta = a * 36 + b
            predicao = 'Predição por Regressão de R$ ' + str('%0.02f' %jan_reta) + 'para Janeiro .'
            self.lineEdit.setText(predicao)

        ##### Cálculo de Séries Temporais #####

        elif self.rb_series_temporais.isChecked() == True:
            model = AutoReg(df['Faturamento'], lags=1, old_names=True) #old_names foi usado por um aviso da próxima versão
            model_fit = model.fit()
            yhat =  model_fit.predict(len(df['Faturamento']), len(df['Faturamento']) + 2)
            pred = np.array(yhat)
            predicao = 'Predição de R$  ' + str('%0.02f' %pred[0]) + ' em janeiro e R$ ' + str('%0.02f' %pred[1]) + ' em Fevereiro .' 
            self.lineEdit.setText(predicao)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
